diff -urN u-boot-2019.04/arch/arm/mach-imx/mx6/Kconfig u-boot-2019.04-usbarmory-mark-two-ums/arch/arm/mach-imx/mx6/Kconfig
--- u-boot-2019.04/arch/arm/mach-imx/mx6/Kconfig	2019-04-09 03:40:40.000000000 +0200
+++ u-boot-2019.04-usbarmory-mark-two-ums/arch/arm/mach-imx/mx6/Kconfig	2019-06-17 21:25:25.463963531 +0200
@@ -486,6 +486,10 @@
 	select SUPPORT_SPL
 	imply CMD_DM
 
+config TARGET_USBARMORY_MKII
+	bool "Support USB armory Mk II"
+	select MX6UL
+
 config TARGET_SAMTEC_VINING_2000
 	bool "samtec VIN|ING 2000"
 	select BOARD_LATE_INIT
@@ -567,6 +571,7 @@
 source "board/phytec/pfla02/Kconfig"
 source "board/phytec/pcl063/Kconfig"
 source "board/gateworks/gw_ventana/Kconfig"
+source "board/inversepath/usbarmory-mark-two/Kconfig"
 source "board/kosagi/novena/Kconfig"
 source "board/samtec/vining_2000/Kconfig"
 source "board/liebherr/display5/Kconfig"
diff -urN u-boot-2019.04/board/inversepath/usbarmory-mark-two/imximage.cfg u-boot-2019.04-usbarmory-mark-two-ums/board/inversepath/usbarmory-mark-two/imximage.cfg
--- u-boot-2019.04/board/inversepath/usbarmory-mark-two/imximage.cfg	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2019.04-usbarmory-mark-two-ums/board/inversepath/usbarmory-mark-two/imximage.cfg	2019-06-17 21:25:25.463963531 +0200
@@ -0,0 +1,109 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * USB armory Mk II board imximage configuration
+ * http://inversepath.com/usbarmory
+ *
+ * Copyright (C) 2019, F-Secure Corportation
+ * Andrej Rosano <andrej.rosano@f-secure.com>
+ */
+
+#define __ASSEMBLY__
+#include <config.h>
+
+IMAGE_VERSION 2
+BOOT_FROM sd
+
+#ifdef CONFIG_SECURE_BOOT
+CSF CONFIG_CSF_SIZE
+#endif
+
+/* CCM */
+/* FIXME: needed? it is already all 1 at reset except CCGR2 */
+
+DATA 4 0x020c4068 0xffffffff  /* CCM_CCGR0 */
+DATA 4 0x020c406c 0xffffffff  /* CCM_CCGR1 */
+DATA 4 0x020c4070 0xffffffff  /* CCM_CCGR2 */
+DATA 4 0x020c4074 0xffffffff  /* CCM_CCGR3 */
+DATA 4 0x020c4078 0xffffffff  /* CCM_CCGR4 */
+DATA 4 0x020c407c 0xffffffff  /* CCM_CCGR5 */
+DATA 4 0x020c4080 0xffffffff  /* CCM_CCGR6 */
+
+/* IOMUX */
+
+DATA 4 0x020E04B4 0x000C0000  /* GRP_DDR_TYPE */
+DATA 4 0x020E04AC 0x00000000  /* GRP_DDRPKE */
+DATA 4 0x020E027C 0x00000030  /* DRAM_SDCLK0_P */
+DATA 4 0x020E0250 0x00000030  /* DRAM_CAS_B */
+DATA 4 0x020E024C 0x00000030  /* DRAM_RAS_B */
+DATA 4 0x020E0490 0x00000030  /* GRP_ADDDS  */
+DATA 4 0x020E0288 0x00000030  /* DRAM_RESET */
+DATA 4 0x020E0270 0x00000000  /* DRAM_SDBA2 */
+DATA 4 0x020E0260 0x00000030  /* DRAM_ODT0  */
+DATA 4 0x020E0264 0x00000030  /* DRAM_ODT1  */
+DATA 4 0x020E04A0 0x00000030  /* GRP_CTLDS  */
+DATA 4 0x020E0494 0x00020000  /* GRP_DDRMODE_CTL  */
+DATA 4 0x020E0280 0x00000030  /* DRAM_SDQS0_P */
+DATA 4 0x020E0284 0x00000030  /* DRAM_SDQS1_P */
+DATA 4 0x020E04B0 0x00020000  /* GRP_DDRMODE   */
+DATA 4 0x020E0498 0x00000030  /* GRP_B0DS     */
+DATA 4 0x020E04A4 0x00000030  /* GRP_B1DS     */
+DATA 4 0x020E0244 0x00000030  /* DRAM_DQM0    */
+DATA 4 0x020E0248 0x00000030  /* DRAM_DQM1    */
+
+/* MMDC */
+
+DATA 4 0x021B001C 0x00008000  /* MMDC_MDSCR       */
+
+/* Calibration setup */
+DATA 4 0x021B0800 0xA1390003  /* MMDC_MPZQSWCTRL  */
+DATA 4 0x021B080C 0x00070000  /* MMDC_MPWLDECTRL0 */
+DATA 4 0x021B083C 0x41600154  /* MMDC_MPDGCTRL0   */
+DATA 4 0x021B0848 0x40405046  /* MMDC_MPRDDLCRL   */
+DATA 4 0x021B0850 0x40405242  /* MMDC_MPWRDLCTL   */
+
+DATA 4 0x021B081C 0x33333333  /* MMDC_MPRRDQBY0DL */
+DATA 4 0x021B0820 0x33333333  /* MMDC_MPRRDQBY1DL */
+DATA 4 0x021B082C 0xf3333333  /* MMDC_MPWRDQBY0DL */
+DATA 4 0x021B0830 0xf3333333  /* MMDC_MPWRDQBY1DL */
+
+DATA 4 0x021B08C0 0x00921012  /* MMDC_MPDCCR      */
+DATA 4 0x021B08B8 0x00000800  /* MMDC_MPMUR0      */
+/* Calibration setup end */
+
+/* MMDC Init */
+DATA 4 0x021B0004 0x0002002D  /* MMDC_MDPDC       */
+DATA 4 0x021B0008 0x1B333030  /* MMDC_MDOTC       */
+DATA 4 0x021B000C 0x676B52F3  /* MMDC_MDCFG0      */
+DATA 4 0x021B0010 0xB66D0B63  /* MMDC_MDCFG1      */
+DATA 4 0x021B0014 0x01FF00DB  /* MMDC_MDCFG1      */
+
+
+DATA 4 0x021B0018 0x00201740  /* MMDC_MDMISC */
+DATA 4 0x021B002C 0x000026D2  /* MMDC_MDRWD  */
+DATA 4 0x021B0030 0x006B1023  /* MMDC_MDOR   */
+DATA 4 0x021B0040 0x0000004F  /* MMDC_? */
+DATA 4 0x021B0000 0x84180000  /* MMDC_MDCTL  */
+
+/* DATA 4 0x021B0890 0x00400A38  /* MPPDCMPR2   */
+/* DATA 4 0x021B001C 0x00008000  /* MMDC_MDSCR  */
+
+/* Mode Registers write */
+DATA 4 0x021B001C 0x02008032
+DATA 4 0x021B001C 0x00008033
+DATA 4 0x021B001C 0x00048031
+DATA 4 0x021B001C 0x15208030
+DATA 4 0x021B001C 0x04008040
+
+/*
+DATA 4 0x021B001C 0x0200803A
+DATA 4 0x021B001C 0x0000803B
+DATA 4 0x021B001C 0x00048039
+DATA 4 0x021B001C 0x15208038
+DATA 4 0x021B001C 0x04008048
+*/
+
+DATA 4 0x021B0020 0x00000800  /* MMDC_MDREF */
+DATA 4 0x021B0818 0x00000227
+DATA 4 0x021B0004 0x0002556D
+DATA 4 0x021B0404 0x00011006
+DATA 4 0x021B001C 0x00000000
diff -urN u-boot-2019.04/board/inversepath/usbarmory-mark-two/Kconfig u-boot-2019.04-usbarmory-mark-two-ums/board/inversepath/usbarmory-mark-two/Kconfig
--- u-boot-2019.04/board/inversepath/usbarmory-mark-two/Kconfig	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2019.04-usbarmory-mark-two-ums/board/inversepath/usbarmory-mark-two/Kconfig	2019-06-17 21:25:25.463963531 +0200
@@ -0,0 +1,15 @@
+if TARGET_USBARMORY_MKII
+
+config IMX_CONFIG
+	default "board/inversepath/usbarmory-mark-two/imximage.cfg"
+
+config SYS_BOARD
+	default "usbarmory-mark-two"
+
+config SYS_VENDOR
+	default "inversepath"
+
+config SYS_CONFIG_NAME
+	default "usbarmory-mark-two"
+
+endif
diff -urN u-boot-2019.04/board/inversepath/usbarmory-mark-two/MAINTAINERS u-boot-2019.04-usbarmory-mark-two-ums/board/inversepath/usbarmory-mark-two/MAINTAINERS
--- u-boot-2019.04/board/inversepath/usbarmory-mark-two/MAINTAINERS	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2019.04-usbarmory-mark-two-ums/board/inversepath/usbarmory-mark-two/MAINTAINERS	2019-06-17 21:25:25.467963531 +0200
@@ -0,0 +1,6 @@
+USBARMORY MKII BOARD
+M:	Andrej Rosano <andrej.rosano@f-secure.com>
+S:	Maintained
+F:	board/inversepath/usbarmory-mark-two/
+F:	include/configs/usbarmory-mark-two.h
+F:	configs/usbarmory-mark-two_defconfig
diff -urN u-boot-2019.04/board/inversepath/usbarmory-mark-two/Makefile u-boot-2019.04-usbarmory-mark-two-ums/board/inversepath/usbarmory-mark-two/Makefile
--- u-boot-2019.04/board/inversepath/usbarmory-mark-two/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2019.04-usbarmory-mark-two-ums/board/inversepath/usbarmory-mark-two/Makefile	2019-06-17 21:25:25.467963531 +0200
@@ -0,0 +1,10 @@
+#
+# USB armory Mk II board Makefile
+# http://inversepath.com/usbarmory
+#
+# Copyright (C) 2019, F-Secure
+# Andrej Rosano <andrej.rosano@f-secure.com>
+#
+# SPDX-License-Identifier:|____GPL-2.0+
+
+obj-y	:= usbarmory-mark-two.o
diff -urN u-boot-2019.04/board/inversepath/usbarmory-mark-two/usbarmory-mark-two.c u-boot-2019.04-usbarmory-mark-two-ums/board/inversepath/usbarmory-mark-two/usbarmory-mark-two.c
--- u-boot-2019.04/board/inversepath/usbarmory-mark-two/usbarmory-mark-two.c	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2019.04-usbarmory-mark-two-ums/board/inversepath/usbarmory-mark-two/usbarmory-mark-two.c	2019-06-17 21:25:25.467963531 +0200
@@ -0,0 +1,188 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * USB armory Mk II board initialization
+ * http://inversepath.com/usbarmory
+ *
+ * Copyright (C) 2019, F-Secure Corporation
+ * Andrej Rosano <andrej.rosano@f-secure.com>
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch/imx-regs.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/arch/crm_regs.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/iomux.h>
+#include <asm/arch/mx6-pins.h>
+#include <asm/mach-imx/iomux-v3.h>
+#include <linux/errno.h>
+#include <i2c.h>
+#include <mmc.h>
+#include <fsl_esdhc.h>
+#include <asm/gpio.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define UART_PAD_CTRL  (PAD_CTL_PKE | PAD_CTL_PUE |		\
+	PAD_CTL_PUS_100K_UP | PAD_CTL_SPEED_MED |		\
+	PAD_CTL_DSE_40ohm   | PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
+#define USDHC_PAD_CTRL (PAD_CTL_PKE | PAD_CTL_PUE |		\
+	PAD_CTL_PUS_22K_UP  | PAD_CTL_SPEED_LOW |		\
+	PAD_CTL_DSE_80ohm   | PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
+#define I2C_PAD_CTRL	(PAD_CTL_PUS_100K_UP |			\
+	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS |	\
+	PAD_CTL_ODE | PAD_CTL_SRE_FAST)
+
+static void setup_iomux_uart(void)
+{
+	static const iomux_v3_cfg_t pads[] = {
+#ifndef CONFIG_SECURE_BOOT
+		MX6_PAD_UART2_TX_DATA__UART2_DCE_TX | MUX_PAD_CTRL(UART_PAD_CTRL),
+#endif
+		MX6_PAD_UART2_RX_DATA__UART2_DCE_RX | MUX_PAD_CTRL(UART_PAD_CTRL)
+	};
+
+	imx_iomux_v3_setup_multiple_pads(pads, ARRAY_SIZE(pads));
+}
+
+static void setup_iomux_i2c(void)
+{
+	static const iomux_v3_cfg_t pads[] = {
+		MX6_PAD_GPIO1_IO02__I2C1_SCL | MUX_PAD_CTRL(I2C_PAD_CTRL),
+		MX6_PAD_GPIO1_IO03__I2C1_SDA | MUX_PAD_CTRL(I2C_PAD_CTRL)
+	};
+
+	imx_iomux_v3_setup_multiple_pads(pads, ARRAY_SIZE(pads));
+}
+
+static void setup_iomux_emmc(void)
+{
+	static const iomux_v3_cfg_t pads[] = {
+		MX6_PAD_NAND_RE_B__USDHC2_CLK | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_NAND_WE_B__USDHC2_CMD | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_NAND_DATA00__USDHC2_DATA0 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_NAND_DATA01__USDHC2_DATA1 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_NAND_DATA02__USDHC2_DATA2 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_NAND_DATA03__USDHC2_DATA3 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_NAND_DATA04__USDHC2_DATA4 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_NAND_DATA05__USDHC2_DATA5 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_NAND_DATA06__USDHC2_DATA6 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_NAND_DATA07__USDHC2_DATA7 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+
+		/*
+		 * RST_B
+		 */
+		MX6_PAD_NAND_ALE__GPIO4_IO10 | MUX_PAD_CTRL(NO_PAD_CTRL),
+	};
+
+	imx_iomux_v3_setup_multiple_pads(pads, ARRAY_SIZE(pads));
+}
+
+static void setup_iomux_microsd(void)
+{
+	static const iomux_v3_cfg_t pads[] = {
+		MX6_PAD_SD1_CLK__USDHC1_CLK | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_SD1_CMD__USDHC1_CMD | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_SD1_DATA0__USDHC1_DATA0 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_SD1_DATA1__USDHC1_DATA1 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_SD1_DATA2__USDHC1_DATA2 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+		MX6_PAD_SD1_DATA3__USDHC1_DATA3 | MUX_PAD_CTRL(USDHC_PAD_CTRL)
+	};
+
+	imx_iomux_v3_setup_multiple_pads(pads, ARRAY_SIZE(pads));
+}
+
+static struct fsl_esdhc_cfg usdhc_cfg[2] = {
+	{USDHC1_BASE_ADDR},
+	{USDHC2_BASE_ADDR},
+};
+
+int board_mmc_getcd(struct mmc *mmc)
+{
+	/*FIXME: CD present on Mk II */
+	return 1;
+}
+
+int board_mmc_init(bd_t *bis)
+{
+	int ret = 0;
+
+	usdhc_cfg[0].sdhc_clk = mxc_get_clock(MXC_ESDHC_CLK);
+	usdhc_cfg[1].sdhc_clk = mxc_get_clock(MXC_ESDHC_CLK);
+	ret = fsl_esdhc_initialize(bis, &usdhc_cfg[0]);
+	ret = fsl_esdhc_initialize(bis, &usdhc_cfg[1]);
+
+	return ret;
+}
+
+int dram_init(void)
+{
+	gd->ram_size = imx_ddr_size();
+	return 0;
+}
+
+int fusb303_init(void)
+{
+	uchar val;
+
+	val = 0xbb;
+	i2c_set_bus_num(0);
+	//i2c_write(0x21, 0x5, 1, &val, 1);
+	i2c_write(0x31, 0x5, 1, &val, 1);
+	return 0;
+}
+
+int board_early_init_f(void)
+{
+	setup_iomux_i2c();
+	setup_iomux_emmc();
+	setup_iomux_microsd();
+	setup_iomux_uart();
+	return 0;
+}
+
+int board_init(void)
+{
+	/* FIXME: move in an early stage, in board_early_init_f() does not work tough */
+	fusb303_init();
+	return 0;
+}
+
+int checkboard(void)
+{
+	puts("Board: F-Secure USB armory Mk II\n");
+	return 0;
+}
+
+
+#ifndef CONFIG_CMDLINE
+static char *ext2_argv[] = {
+	"ext2load",
+	"mmc",
+	"1:1",
+	USBARMORY_FIT_ADDR,
+	USBARMORY_FIT_PATH
+};
+
+static char *bootm_argv[] = {
+	"bootm",
+	USBARMORY_FIT_ADDR
+};
+
+int board_run_command(const char *cmdline)
+{
+	printf("%s %s %s %s %s\n", ext2_argv[0], ext2_argv[1], ext2_argv[2],
+	       ext2_argv[3], ext2_argv[4]);
+
+	if (do_ext2load(NULL, 0, 5, ext2_argv) != 0) {
+		udelay(5*1000*1000);
+		return 1;
+	}
+
+	printf("%s %s\n", bootm_argv[0], bootm_argv[1]);
+	do_bootm(NULL, 0, 2, bootm_argv);
+
+	return 1;
+}
+#endif
diff -urN u-boot-2019.04/configs/usbarmory-mark-two_defconfig u-boot-2019.04-usbarmory-mark-two-ums/configs/usbarmory-mark-two_defconfig
--- u-boot-2019.04/configs/usbarmory-mark-two_defconfig	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2019.04-usbarmory-mark-two-ums/configs/usbarmory-mark-two_defconfig	2019-06-17 21:25:25.467963531 +0200
@@ -0,0 +1,37 @@
+CONFIG_ARM=y
+CONFIG_ARCH_MX6=y
+CONFIG_SYS_TEXT_BASE=0x87800000
+CONFIG_TARGET_USBARMORY_MKII=y
+# CONFIG_CMD_BMODE is not set
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_NR_DRAM_BANKS=1
+CONFIG_BOARD_EARLY_INIT_F=y
+# CONFIG_USE_BOOTCOMMAND is not set
+CONFIG_CMD_MEMTEST=y
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_USB=y
+# CONFIG_CMD_SETEXPR is not set
+CONFIG_FSL_ESDHC=y
+CONFIG_USB=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_DOWNLOAD=y
+CONFIG_OF_LIBFDT=y
+CONFIG_CMD_USB_MASS_STORAGE=y
+CONFIG_USB_GADGET_MANUFACTURER="FSL"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0525
+CONFIG_USB_GADGET_PRODUCT_NUM=0xa4a5
+CONFIG_CI_UDC=y
+# CONFIG_IMX_WATCHDOG is not set
+# CONFIG_SECURE_BOOT is not set
+# CONFIG_BOOTDELAY=-2
+# CONFIG_DM is not set
+# CONFIG_FIT is not set
+# CONFIG_OF_CONTROL is not set
+# CONFIG_OF_SEPARATE is not set
+# CONFIG_FIT_SIGNATURE is not set
+# CONFIG_RSA is not set
+# CONFIG_RSA_SOFTWARE_EXP is not set
+# CONFIG_ENV_IS_NOWHERE is not set
+CONFIG_ENV_IS_IN_MMC=y
diff -urN u-boot-2019.04/include/configs/usbarmory-mark-two.h u-boot-2019.04-usbarmory-mark-two-ums/include/configs/usbarmory-mark-two.h
--- u-boot-2019.04/include/configs/usbarmory-mark-two.h	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-2019.04-usbarmory-mark-two-ums/include/configs/usbarmory-mark-two.h	2019-06-17 21:26:09.119962749 +0200
@@ -0,0 +1,110 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * USB armory Mk II board configuration settings
+ * http://inversepath.com/usbarmory
+ *
+ * Copyright (C) 2019, F-Secure Corporation
+ * Andrej Rosano <andrej.rosano@f-secure.com>
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#define CONFIG_SYS_FSL_CLK
+
+#include <asm/arch/imx-regs.h>
+#include "mx6_common.h"
+
+/* U-Boot environment */
+#define CONFIG_ENV_OFFSET	(1 * SZ_1M)
+#define CONFIG_ENV_SIZE	(8 * SZ_1K)
+#define CONFIG_SYS_MMC_ENV_DEV	0
+
+/* U-Boot general configurations */
+#define CONFIG_SYS_CBSIZE	512
+
+/* UART */
+#define CONFIG_MXC_UART
+#define CONFIG_MXC_UART_BASE	UART2_BASE
+
+/* SD/MMC */
+#define CONFIG_SYS_FSL_ESDHC_NUM	1
+#define CONFIG_SYS_FSL_ESDHC_ADDR	USDHC1_BASE_ADDR
+
+/* USB */
+// #define CONFIG_USB_EHCI_MX5
+// #define CONFIG_MXC_USB_PORT	1
+#define CONFIG_MXC_USB_PORTSC	(PORT_PTS_UTMI | PORT_PTS_PTW)
+// #define CONFIG_MXC_USB_FLAGS	0
+
+/* I2C */
+#define CONFIG_SYS_I2C
+#define CONFIG_SYS_I2C_MXC
+#define CONFIG_SYS_I2C_SPEED 100000
+#define CONFIG_SYS_I2C_MXC_I2C1		/* enable I2C bus 1 */
+// #define CONFIG_SYS_I2C_MXC_I2C2		/* enable I2C bus 2 */
+
+/* Fuse */
+// #define CONFIG_FSL_IIM
+
+/* U-Boot memory offsets */
+//#define CONFIG_LOADADDR		0x72000000
+#define CONFIG_SYS_LOAD_ADDR	CONFIG_LOADADDR
+
+/* Linux boot */
+#define CONFIG_HOSTNAME		"usbarmory"
+
+#ifndef CONFIG_SECURE_BOOT
+#define CONFIG_BOOTCOMMAND						\
+	"ums 0 mmc 1"
+#endif
+
+#ifdef CONFIG_SECURE_BOOT
+#define CONFIG_BOOTCOMMAND							\
+	"setenv bootargs console=${console} ${bootargs_default}; "		\
+	"ext2load mmc 0:1 ${kernel_addr_r} /boot/usbarmory.itb 0x4000000; "	\
+	"bootm ${kernel_addr_r}"
+#endif
+
+#define BOOT_TARGET_DEVICES(func) func(MMC, mmc, 0)
+
+#include <config_distro_bootcmd.h>
+
+#define MEM_LAYOUT_ENV_SETTINGS			\
+	"kernel_addr_r=0x80800000\0"		\
+	"fdt_addr_r=0x82000000\0"		\
+	"scriptaddr=0x80800000\0"		\
+	"pxefile_addr_r=0x80800000\0"		\
+	"ramdisk_addr_r=0x83000000\0"
+
+#define CONFIG_EXTRA_ENV_SETTINGS				\
+	MEM_LAYOUT_ENV_SETTINGS					\
+	"bootargs_default=root=/dev/mmcblk0p1 rootwait rw\0"	\
+	"fdtfile=imx6ull-usbarmory.dtb\0"			\
+	"console=ttymxc1,115200\0"				\
+	BOOTENV
+
+#ifndef CONFIG_CMDLINE
+#define USBARMORY_FIT_PATH	"/boot/usbarmory.itb"
+#define USBARMORY_FIT_ADDR	"0x80800000"
+#endif
+
+/* Physical Memory Map */
+#define PHYS_SDRAM			MMDC0_ARB_BASE_ADDR
+//#define PHYS_SDRAM_SIZE			(gd->ram_size)
+
+#define CONFIG_SYS_SDRAM_BASE		PHYS_SDRAM
+#define CONFIG_SYS_INIT_RAM_ADDR	IRAM_BASE_ADDR
+#define CONFIG_SYS_INIT_RAM_SIZE	IRAM_SIZE
+
+#define CONFIG_SYS_INIT_SP_OFFSET \
+	(CONFIG_SYS_INIT_RAM_SIZE - GENERATED_GBL_DATA_SIZE)
+#define CONFIG_SYS_INIT_SP_ADDR \
+	(CONFIG_SYS_INIT_RAM_ADDR + CONFIG_SYS_INIT_SP_OFFSET)
+
+#define CONFIG_SYS_MEMTEST_START	0x80000000
+#define CONFIG_SYS_MEMTEST_END		0xa0000000
+
+#define CONFIG_SYS_MALLOC_LEN		(10 * 1024 * 1024)
+
+#endif				/* __CONFIG_H */
